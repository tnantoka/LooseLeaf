#!/usr/bin/env node

/* Load modules */
var fs = require('fs'),
  join = require('path').join;

/* Define constants */
var BASE_DIR = join(__dirname, '..');
var VERSION = require('../lib/package').version();
var CODE_NAME = require('../lib/package').codeName();
var DEFAULT_PATH = 'blog';
var USAGE = ''
  + '\x1b[1mUsage\x1b[0m: looseleaf [options] [path="' + DEFAULT_PATH + '"]\n'
  + '\n'
  + '\x1b[1mOptions\x1b[0m:\n'
  + '\t-v, --version\tShow version number\n'
  + '\t-h, --help\tShow this help message\n'
  + '\t-d, --dir\tShow install directory'
;

/* Define functions */

// Successful end
function success(msg) {
  console.log(msg);
  process.exit(0);
}

// Abnormal end
function error(msg) {
  console.error(msg);
  process.exit(1);
}

// Show message when create 
function create(path) {
//  console.log('\x1b[32mcreate\x1b[0m: ' + path);
}

// Warning messsage
function warning(msg) {
  console.error('\x1b[31mwarning\x1b[0m: ' + msg);
}

// Copy directory
function copyDir(srcPath, dstPath) {

  if (!/\/$/.test(srcPath)) srcPath += '/';
  if (!/\/$/.test(dstPath)) dstPath += '/';

  // Make directory if NOT exist
  try {
    fs.mkdirSync(dstPath, fs.statSync(srcPath).mode);
    create(dstPath)
  } catch (e) {
    // File exists
    if (e.errno = 17) {
      warning(e.message);
    } else {
      throw e;
    }
  }
  var files = fs.readdirSync(srcPath);
    
  for(var i = 0; i < files.length; i++) {

    // Ignore ".*"  
    if (/^\./.test(files[i])) {
      continue;
    }
    
    var srcFile = srcPath + files[i];
    var dstFile = dstPath + files[i];

    var srcStat = fs.statSync(srcFile);
      
    // Recursive call If direcotory
    if (srcStat.isDirectory()) {
      copyDir(srcFile, dstFile);
    }
    // Copy to dstPath if file
    else if (srcStat.isFile()) {
      // NOT overwrite file
      try {
        var dstStat = fs.statSync(dstFile);
        // File exists
        warning("EEXIST, File exists '" + dstFile + "'");
      } catch (e) {
        // File NOT exists
        if (e.errno = 2) {
          var data = fs.readFileSync(srcFile);
          fs.writeFileSync(dstFile, data);
          create(dstFile)
        } else {
          throw e;
        }
      }
    }
  }
}

/* Parse arguments */
var args = process.argv.slice(2);
var path = DEFAULT_PATH;
while (args.length) {
  var arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      success(USAGE);
      break;
    case '-v':
    case '--version':
      success(VERSION + ' "' + CODE_NAME + '"');
      break;
    case '-d':
    case '--dir':
      success(BASE_DIR);
      break;
    default:
      path = arg;
  }
}

if (path) {
  copyDir(join(BASE_DIR, 'skeleton'), path);
  fs.mkdirSync(path + '/data/entry', fs.statSync(join(BASE_DIR, 'skeleton')).mode);
  console.log('"' + path + '" created successfully');  
  require('child_process').exec('npm link looseleaf', { cwd: path }, function(err, stdout, stderr) {
    if (err) {
      throw err;
    }
    if (stderr) {
      console.log(stderr);
    }
    console.log('looseleaf ok');
    console.log('please customize "' + path + '/conf.json"');
  });
} else {
  error(USAGE);
}
